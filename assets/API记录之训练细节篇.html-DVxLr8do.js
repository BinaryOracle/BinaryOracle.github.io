import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as s,d as n,e,o as l}from"./app-C3xjI_j7.js";const h={};function r(d,i){return l(),t("div",null,[i[0]||(i[0]=s("p",null,[s("code",null,"API记录之训练细节篇")],-1)),n(" more "),i[1]||(i[1]=e(`<h2 id="os-environ-cuda-visible-devices" tabindex="-1"><a class="header-anchor" href="#os-environ-cuda-visible-devices"><span>os.environ[&quot;CUDA_VISIBLE_DEVICES&quot;]</span></a></h2><ul><li><p><strong>作用</strong>：限制进程可见的 GPU，隐藏未列出的设备。</p></li><li><p><strong>继承性</strong>：主进程设置后，所有子进程会继承同样的可见 GPU 配置。</p></li><li><p><strong>效果</strong>：</p><ul><li><p><code>torch.cuda.device_count()</code> 返回的是“可见 GPU 数”，而非物理 GPU 总数。</p></li><li><p>子进程无法访问未分配的 GPU。</p></li></ul></li><li><p><strong>注意</strong>：子进程里修改只对该子进程生效，不会影响主进程或其他进程。</p></li></ul><p><strong>设置方式</strong>: 你可以在运行程序前用命令行设置</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">CUDA_VISIBLE_DEVICES</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">0,1</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> python</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> train.py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>也可以在代码里设置：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> os</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">os.environ[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;CUDA_VISIBLE_DEVICES&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;0,1&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>一句话总结</strong>：<code>CUDA_VISIBLE_DEVICES</code> 用来指定程序和其子进程能看到哪些 GPU，相当于给进程建立一个“GPU 白名单”。</p><h2 id="随机数种子与确定性" tabindex="-1"><a class="header-anchor" href="#随机数种子与确定性"><span>随机数种子与确定性</span></a></h2><ol><li><p><strong>作用</strong>：</p><ul><li><p>随机数种子（random seed）用于固定伪随机数生成器的初始状态。</p></li><li><p>同样的种子保证每次生成的随机数序列<strong>完全相同</strong>，从而实现实验可重复性。</p></li><li><p>随机数本质上仍是伪随机，只是<strong>可预测</strong>，不是一个常数。</p></li></ul></li><li><p><strong>深度学习中通常固定的随机源</strong>：</p><ul><li><p>Python 内置 <code>random</code> 模块（数据增强等）</p></li><li><p>NumPy 随机数生成器（数据预处理、初始化等）</p></li><li><p>PyTorch CPU 随机数生成器（权重初始化、dropout 等）</p></li><li><p>PyTorch GPU 随机数生成器（CUDA 上的操作，如 dropout、卷积初始化等）</p></li><li><p>cuDNN 的随机算法（<code>cudnn.deterministic=True</code>）保证卷积等操作的可重复性</p></li></ul></li></ol><p><strong>常用设置如下</strong>:</p><ol><li><strong>设置 Python 内置随机数种子</strong>：</li></ol><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">random.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">seed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(args.manual_seed)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>控制 Python <code>random</code> 模块产生的随机数序列，确保每次运行生成相同的随机数。</li></ul><ol start="2"><li><strong>设置 NumPy 随机数种子</strong>：</li></ol><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">np.random.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">seed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(args.manual_seed)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>控制 NumPy 的随机数生成，比如初始化权重、打乱数据顺序等。</li></ul><ol start="3"><li><strong>设置 PyTorch CPU 随机数种子</strong>：</li></ol><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">torch.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">manual_seed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(args.manual_seed)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>控制 PyTorch 在 CPU 上的随机操作，例如权重初始化、dropout 等。</li></ul><ol start="4"><li><strong>设置 PyTorch CUDA 随机数种子</strong>：</li></ol><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> torch.cuda.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">is_available</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    torch.cuda.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">manual_seed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(args.manual_seed)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    torch.cuda.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">manual_seed_all</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(args.manual_seed)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>manual_seed</code> 只设置当前 GPU 的随机种子，<code>manual_seed_all</code> 则设置所有可见 GPU，保证多 GPU 情况下结果一致。</li></ul><ol start="5"><li><strong>控制 cuDNN 行为</strong>：</li></ol><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cudnn.benchmark </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> False</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cudnn.deterministic </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> True</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>cudnn.benchmark = False</code>：禁止 cuDNN 自动寻找最优卷积算法（这个算法搜索过程会引入随机性）。</p></li><li><p><code>cudnn.deterministic = True</code>：强制使用确定性的卷积算法，保证每次运行结果一致。</p></li></ul><h2 id="偏置与归一化层的关系" tabindex="-1"><a class="header-anchor" href="#偏置与归一化层的关系"><span>偏置与归一化层的关系</span></a></h2><p><strong>BatchNorm 会重新中心化数据</strong></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># BatchNorm 的数学公式：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">y </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mean) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> sqrt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(var </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> eps) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> gamma </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> beta</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 其中：</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># - gamma: 缩放参数（可学习）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># - beta: 偏置参数（可学习）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># - mean, var: 批次的均值和方差</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Linear 层也有偏置</strong></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Linear 层的计算：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">z </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">@</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> W.T </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># b是偏置项</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>为什么此时 Linear 层的偏置是冗余的</strong> ？</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>输入 → Linear → BatchNorm 的计算链：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>output = BN(Linear(x))</span></span>
<span class="line"><span>        = BN(x @ W.T + b)</span></span>
<span class="line"><span>        = [(x @ W.T + b - mean) / std] * gamma + beta</span></span>
<span class="line"><span>        = [x @ W.T / std + (b - mean)/std] * gamma + beta</span></span>
<span class="line"><span>        = (x @ W.T) * (gamma/std) + [gamma*(b-mean)/std + beta]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>可以看到:</strong></p><ul><li><p><code>(x @ W.T) * (gamma/std)</code>：有效的权重变换</p></li><li><p><code>[gamma*(b-mean)/std + beta]</code>：<strong>常数偏置项</strong></p></li></ul><table><thead><tr><th>组件</th><th>作用</th><th>是否冗余</th></tr></thead><tbody><tr><td><strong>Linear.bias</strong></td><td>添加常数偏移</td><td>✅ 冗余</td></tr><tr><td><strong>BatchNorm.beta</strong></td><td>添加常数偏移</td><td>✅ 唯一需要的</td></tr><tr><td><strong>BatchNorm.gamma</strong></td><td>缩放特征</td><td>❌ 必要</td></tr><tr><td><strong>BatchNorm</strong> 的均值归一化</td><td>中心化数据</td><td>❌ 必要</td></tr></tbody></table><p><strong>实际代码对比:</strong></p><ol><li>错误做法（冗余）：</li></ol><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 浪费参数和计算</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.linear </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nn.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">Linear</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(in_dim, out_dim, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">bias</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 有偏置</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.bn </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nn.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">BatchNorm1d</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(out_dim)                    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 也有偏置beta</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>正确做法（优化后）：</li></ol><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 参数和计算更高效</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.linear </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nn.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">Linear</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(in_dim, out_dim, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">bias</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">False</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 无偏置</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.bn </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nn.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">BatchNorm1d</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(out_dim)                     </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 用BN的beta作为偏置</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>如果<strong>不使用 BatchNorm</strong>，那么应该保留偏置：</li></ol><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 只有Linear层，没有BN</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.linear </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nn.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">Linear</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(in_dim, out_dim, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">bias</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 需要偏置</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 或者使用LayerNorm等其他归一化</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.linear </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nn.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">Linear</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(in_dim, out_dim, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">bias</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">False</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.norm </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nn.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">LayerNorm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(out_dim)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># LayerNorm也有偏置参数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>最佳实践总结</strong>:</p><table><thead><tr><th>场景</th><th>建议</th><th>原因</th></tr></thead><tbody><tr><td><strong>Linear + BatchNorm</strong></td><td><code>bias=False</code></td><td>避免冗余，BN的beta足够</td></tr><tr><td><strong>只有Linear</strong></td><td><code>bias=True</code></td><td>需要偏置来增加模型表达能力</td></tr><tr><td><strong>Linear + LayerNorm</strong></td><td><code>bias=False</code></td><td>LayerNorm也有可学习的偏置</td></tr><tr><td><strong>Linear + InstanceNorm</strong></td><td><code>bias=False</code></td><td>InstanceNorm有可学习的参数</td></tr></tbody></table><p>深度学习中的<strong>标准实践</strong>：</p><ol><li><p><strong>CNN中</strong>：<code>Conv2d + BatchNorm</code> 时，<code>conv.bias=False</code></p></li><li><p><strong>Transformer中</strong>：<code>Linear + LayerNorm</code> 时，<code>linear.bias=False</code></p></li><li><p><strong>点云网络中</strong>：<code>Linear + BatchNorm</code> 时，<code>linear.bias=False</code></p></li></ol>`,46))])}const o=a(h,[["render",r]]),g=JSON.parse('{"path":"/other/API%E8%AE%B0%E5%BD%95%E4%B9%8B%E8%AE%AD%E7%BB%83%E7%BB%86%E8%8A%82%E7%AF%87.html","title":"API记录之训练细节篇","lang":"zh-CN","frontmatter":{"title":"API记录之训练细节篇","icon":"file","category":["tools"],"tag":["已发布"],"footer":"技术共建，知识共享","date":"2025-09-02T00:00:00.000Z","author":["BinaryOracle"],"description":"API记录之训练细节篇","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"API记录之训练细节篇\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-09-02T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-05T07:55:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BinaryOracle\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/other/API%E8%AE%B0%E5%BD%95%E4%B9%8B%E8%AE%AD%E7%BB%83%E7%BB%86%E8%8A%82%E7%AF%87.html"}],["meta",{"property":"og:site_name","content":"MetaMind"}],["meta",{"property":"og:title","content":"API记录之训练细节篇"}],["meta",{"property":"og:description","content":"API记录之训练细节篇"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-05T07:55:26.000Z"}],["meta",{"property":"article:author","content":"BinaryOracle"}],["meta",{"property":"article:tag","content":"已发布"}],["meta",{"property":"article:published_time","content":"2025-09-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-05T07:55:26.000Z"}]]},"git":{"createdTime":1756799000000,"updatedTime":1757058926000,"contributors":[{"name":"BinaryOracle","username":"BinaryOracle","email":"3076679680@qq.com","commits":3,"url":"https://github.com/BinaryOracle"}]},"readingTime":{"minutes":3.66,"words":1097},"filePathRelative":"other/API记录之训练细节篇.md","excerpt":"<p><code>API记录之训练细节篇</code></p>\\n","autoDesc":true}');export{o as comp,g as data};
