import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as s,e as a,f as n,o as l}from"./app-64l-L0KT.js";const r={};function h(p,i){return l(),t("div",null,[i[0]||(i[0]=s("p",null,[s("code",null,"API记录之框架篇")],-1)),a(" more "),i[1]||(i[1]=n(`<h2 id="timm-库" tabindex="-1"><a class="header-anchor" href="#timm-库"><span>timm 库</span></a></h2><p><code>timm</code> 是 <strong>PyTorch Image Models</strong> 的缩写，是 Ross Wightman 开发和维护的一个 <strong>PyTorch 视觉模型库</strong>，在计算机视觉领域非常常用。它在科研与工业界都很受欢迎，因为它集合了大量常见与前沿的图像模型，同时提供了高质量的实现和训练权重。</p><p><strong>特点</strong>:</p><ol><li><p><strong>模型丰富</strong></p><ul><li><p>收录了数百种视觉模型，包括：</p><ul><li><p>经典模型：ResNet、DenseNet、EfficientNet、MobileNet</p></li><li><p>Transformer 系列：ViT、DeiT、Swin Transformer、ConvNeXt</p></li><li><p>最新论文模型：EVA、ConvNeXt V2、MaxViT 等</p></li></ul></li><li><p>你几乎可以把它当成 <strong>视觉模型的“模型仓库”</strong>。</p></li></ul></li><li><p><strong>预训练权重</strong></p><ul><li><p>提供了大量在 <strong>ImageNet-1k / ImageNet-21k</strong> 上训练好的权重，开箱即用。</p></li><li><p>可以直接加载预训练模型用于 <strong>迁移学习 / finetune</strong>。</p></li></ul></li><li><p><strong>统一接口</strong></p><ul><li><p>使用简单，几乎所有模型都能通过同样的方式调用：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> timm</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">model </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> timm.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">create_model</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;resnet50&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">pretrained</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> torch.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">randn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">224</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">224</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">y </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> model</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(x)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>API 统一，降低了不同架构之间的切换成本。</p></li></ul></li><li><p><strong>实用工具</strong></p><ul><li><p><code>timm.data</code>：包含数据增强（RandAugment、Mixup、CutMix 等）。</p></li><li><p><code>timm.optim</code>：包含优化器（AdamP、RAdam、Lookahead 等）。</p></li><li><p><code>timm.scheduler</code>：学习率调度器（CosineAnnealing、OneCycle、TanhDecay 等）。</p></li><li><p><code>timm.loss</code>：封装了多种损失函数（Label Smoothing、SoftTarget CrossEntropy 等）。</p></li><li><p>这些设计让训练流程非常完整。</p></li></ul></li><li><p><strong>高效实现</strong></p><ul><li><p>很多模型在 <code>timm</code> 里做了 <strong>速度和显存优化</strong>，常常比官方实现更高效。</p></li><li><p>支持混合精度训练、channels-last 等特性。</p></li></ul></li></ol><h3 id="create-model-与-register-model-装饰器" tabindex="-1"><a class="header-anchor" href="#create-model-与-register-model-装饰器"><span>create_model 与 @register_model 装饰器</span></a></h3><p><strong><code>create_model</code></strong>：timm 提供的统一入口，用于按名字实例化模型。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">model </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> timm.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">create_model</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;resnet50&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">pretrained</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong><code>@register_model</code></strong>：用于将自定义模型注册到 timm 模型库，才能通过 <code>create_model</code> 调用。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">@register_model</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> my_model</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">pretrained</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">False</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> **</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">kwargs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">   return</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> MyModel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(**kwargs)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前者是<strong>用</strong>模型，后者是<strong>加</strong>模型。</p>`,10))])}const d=e(r,[["render",h]]),g=JSON.parse('{"path":"/other/API%E8%AE%B0%E5%BD%95%E4%B9%8B%E6%A1%86%E6%9E%B6%E7%AF%87.html","title":"API记录之框架篇","lang":"zh-CN","frontmatter":{"title":"API记录之框架篇","icon":"file","category":["tools"],"tag":["已发布"],"footer":"技术共建，知识共享","date":"2025-08-22T00:00:00.000Z","author":["BinaryOracle"],"description":"API记录之框架篇","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"API记录之框架篇\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-22T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-22T02:07:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BinaryOracle\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/other/API%E8%AE%B0%E5%BD%95%E4%B9%8B%E6%A1%86%E6%9E%B6%E7%AF%87.html"}],["meta",{"property":"og:site_name","content":"MetaMind"}],["meta",{"property":"og:title","content":"API记录之框架篇"}],["meta",{"property":"og:description","content":"API记录之框架篇"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-22T02:07:27.000Z"}],["meta",{"property":"article:author","content":"BinaryOracle"}],["meta",{"property":"article:tag","content":"已发布"}],["meta",{"property":"article:published_time","content":"2025-08-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-22T02:07:27.000Z"}]]},"git":{"createdTime":1755828447000,"updatedTime":1755828447000,"contributors":[{"name":"BinaryOracle","username":"BinaryOracle","email":"3076679680@qq.com","commits":1,"url":"https://github.com/BinaryOracle"}]},"readingTime":{"minutes":1.6,"words":481},"filePathRelative":"other/API记录之框架篇.md","excerpt":"<p><code>API记录之框架篇</code></p>\\n","autoDesc":true}');export{d as comp,g as data};
